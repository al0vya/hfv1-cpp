template <typename A, typename B>
void zip(const vector<A>& a, const vector<B>& b, vector<pair<A, B>>& zipped);
template <typename A, typename B>
void unzip(const vector<pair<A, B>>& zipped, vector<A>& a, vector<B>& b);
		

		// declaring vectors for pushing back variables during decoding in an adaptive manner
		vector<real> qAdaptive;
		vector<real> etaAdaptive;
		vector<real> zAdaptive;
		vector<real> dxAdaptive;
		vector<real> xAdaptive;
		vector<int> levelIndicesAdaptive;
		vector<int> activeIndices;
		
		...		

		// START DECODING //

		for (int c = 0; c < simulationParameters.cells; c++)
		{
			int scaleStep = c * scaleCoeffsPerCell;
			int detailStep = c * detailsPerCell;

			for (int n = 0; n < solverParameters.L; n++)
			{
				int currentLevStart = (1 << n) - 1;
				int currentLevEnd = (1 << (n + 1)) - 2;
				int kHigher = currentLevEnd + 1; // index of child element

				for (int k = currentLevStart; k <= currentLevEnd; k++)
				{
					if (!significantDetails[detailStep + k] && !isnan(flattenedScaleCoeffs.q[scaleStep + k]))
					{
						real q = flattenedScaleCoeffs.q[scaleStep + k];
						real eta = flattenedScaleCoeffs.eta[scaleStep + k];
						real z = flattenedScaleCoeffs.z[scaleStep + k];
						real dxLocal = dxFlattened[scaleStep + k];
						real x = xFlattened[scaleStep + k];
						int levelIndex = levelIndicesFlattened[scaleStep + k];

						qAdaptive.push_back(q);
						etaAdaptive.push_back(eta);
						zAdaptive.push_back(z);
						dxAdaptive.push_back(dxLocal);
						xAdaptive.push_back(x);
						levelIndicesAdaptive.push_back(levelIndex);
						activeIndices.push_back(scaleStep + k);
					}
					else if (significantDetails[detailStep + k])
					{
						real q1 = decode1(flattenedScaleCoeffs.q[scaleStep + k], flattenedDetails.q[detailStep + k]);
						real eta1 = decode1(flattenedScaleCoeffs.eta[scaleStep + k], flattenedDetails.eta[detailStep + k]);
						real z1 = decode1(flattenedScaleCoeffs.z[scaleStep + k], flattenedDetails.z[detailStep + k]);
		
						real q2 = decode2(flattenedScaleCoeffs.q[scaleStep + k], flattenedDetails.q[detailStep + k]);
						real eta2 = decode2(flattenedScaleCoeffs.eta[scaleStep + k], flattenedDetails.eta[detailStep + k]);
						real z2 = decode2(flattenedScaleCoeffs.z[scaleStep + k], flattenedDetails.z[detailStep + k]);

						flattenedScaleCoeffs.q[scaleStep + kHigher] = q1;
						flattenedScaleCoeffs.eta[scaleStep + kHigher] = eta1;
						flattenedScaleCoeffs.z[scaleStep + kHigher] = z1;

						flattenedScaleCoeffs.q[scaleStep + kHigher + 1] = q2;
						flattenedScaleCoeffs.eta[scaleStep + kHigher + 1] = eta2;
						flattenedScaleCoeffs.z[scaleStep + kHigher + 1] = z2;

						real dxHigher = dxFlattened[scaleStep + k] / 2;
						dxFlattened[scaleStep + kHigher] = dxHigher;
						dxFlattened[scaleStep + kHigher + 1] = dxHigher;

						real x1 = xFlattened[scaleStep + k] - dxFlattened[scaleStep + kHigher] / 2;
						real x2 = xFlattened[scaleStep + k] + dxFlattened[scaleStep + kHigher] / 2;
						xFlattened[scaleStep + kHigher] = x1;
						xFlattened[scaleStep + kHigher + 1] = x2;

						int nHigher = levelIndicesFlattened[scaleStep + k] + 1;
						levelIndicesFlattened[scaleStep + kHigher] = nHigher;
						levelIndicesFlattened[scaleStep + kHigher + 1] = nHigher;

						if (levelIndicesFlattened[scaleStep + k] + 1 == solverParameters.L)
						{
							qAdaptive.push_back(q1);
							qAdaptive.push_back(q2);

							etaAdaptive.push_back(eta1);
							etaAdaptive.push_back(eta2);

							zAdaptive.push_back(z1);
							zAdaptive.push_back(z2);

							dxAdaptive.push_back(dxHigher);
							dxAdaptive.push_back(dxHigher);

							xAdaptive.push_back(x1);
							xAdaptive.push_back(x2);

							levelIndicesAdaptive.push_back(nHigher);
							levelIndicesAdaptive.push_back(nHigher);

							activeIndices.push_back(scaleStep + kHigher);
							activeIndices.push_back(scaleStep + kHigher + 1);
						}
					}

					kHigher += 2;
				}
			}
		}

		// END DECODING //


		// START SORTING //

		vector<real> xSorted = xAdaptive;
		vector<pair<real, real>> qZipped;
		zip(qAdaptive, xSorted, qZipped);

		// sort the vector of pairs
		sort(begin(qZipped), end(qZipped),
			[&](const auto& a, const auto& b)
			{
				return a.second < b.second;
			});

		// write the sorted pairs back to the original vectors
		unzip(qZipped, qAdaptive, xSorted);

		xSorted = xAdaptive;
		vector<pair<real, real>> etaZipped;
		zip(etaAdaptive, xSorted, etaZipped);

		sort(begin(etaZipped), end(etaZipped),
			[&](const auto& a, const auto& b)
			{
				return a.second < b.second;
			});

		unzip(etaZipped, etaAdaptive, xSorted);

		xSorted = xAdaptive;
		vector<pair<real, real>> zZipped;
		zip(zAdaptive, xSorted, zZipped);

		sort(begin(zZipped), end(zZipped),
			[&](const auto& a, const auto& b)
			{
				return a.second < b.second;
			});

		unzip(zZipped, zAdaptive, xSorted);

		xSorted = xAdaptive;
		vector<pair<real, real>> dxZipped;
		zip(dxAdaptive, xSorted, dxZipped);

		sort(begin(dxZipped), end(dxZipped),
			[&](const auto& a, const auto& b)
			{
				return a.second < b.second;
			});

		unzip(dxZipped, dxAdaptive, xSorted);

		xSorted = xAdaptive;
		vector<pair<int, real>> levelIndicesZipped;
		zip(levelIndicesAdaptive, xSorted, levelIndicesZipped);

		sort(begin(levelIndicesZipped), end(levelIndicesZipped),
			[&](const auto& a, const auto& b)
			{
				return a.second < b.second;
			});

		unzip(levelIndicesZipped, levelIndicesAdaptive, xSorted);

		xSorted = xAdaptive;
		vector<pair<int, real>> activeIndicesZipped;
		zip(activeIndices, xSorted, activeIndicesZipped);

		sort(begin(activeIndicesZipped), end(activeIndicesZipped),
			[&](const auto& a, const auto& b)
			{
				return a.second < b.second;
			});

		unzip(activeIndicesZipped, activeIndices, xSorted);

		// END SORTING //


		assembledSolution.length = activeIndices.size();

		for (i = 0; i < assembledSolution.length; i++)
		{
			assembledSolution.qWithBC[i + 1] = qAdaptive[i];
			assembledSolution.hWithBC[i + 1] = etaAdaptive[i] - zAdaptive[i];
			assembledSolution.zWithBC[i + 1] = zAdaptive[i];
			assembledSolution.dxLocalWithBC[i + 1] = dxAdaptive[i];
			assembledSolution.activeIndices[i] = activeIndices[i];
		}		

template <typename A, typename B> // typename refers to any generic type
void zip(const vector<A>& a, const vector<B>& b, vector<pair<A, B>>& zipped)
{
	for (size_t i = 0; i < a.size(); ++i)
	{
		zipped.push_back(make_pair(a[i], b[i]));
	}
}

template <typename A, typename B>
void unzip(const vector<pair<A, B>>& zipped, vector<A>& a, vector<B>& b)
{
	for (size_t i = 0; i < a.size(); i++)
	{
		a[i] = zipped[i].first;
		b[i] = zipped[i].second;
	}
}